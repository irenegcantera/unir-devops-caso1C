pipeline {
    agent any
    stages {
        
        // Etapa “Get Code” para descargar el código fuente del repositorio (rama develop)
        stage('Get Code'){
            
            steps{
                
                echo 'Descarga código fuente de la rama develop'
                git branch: 'develop', url: 'https://github.com/irenegcantera/unir-devops-caso1C.git'
                
            }
            
        }

        // Etapa “Set Up” para descargar librerías necesarias
        stage('SetUp'){
            
            steps{
                echo 'Setup Virtualenv for testing'
                sh "bash /var/lib/jenkins/workspace/cp1D/pipelines/PIPELINE-FULL-STAGING/setup.sh"
            }
            
        }
        
        // Etapa “Static Test” para la ejecución de las pruebas de análisis estático
        stage('Static Test'){
            
            steps{
                
                echo 'Ejecución de las pruebas de análisis estático'
                
                echo 'Analisis de código estático'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh ''' flake8 --format=pylint --exit-zero /var/lib/jenkins/workspace/cp1D/src >flake8.out '''
                    recordIssues qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]], tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
    			      }
    			
                echo 'Seguridad código estático'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh ''' bandit --exit-zero -r /var/lib/jenkins/workspace/cp1D/src -f custom -o bandit.out --severity-level all --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}" '''
                    recordIssues qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]], tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
    			      }  
    			
            }
            
        }
        
        // Etapa de despliegue SAM (“Deploy”)
        stage('Deploy'){
            
            steps{
                
                echo 'Despliegue SAM'
                sh ''' 
                    sam build
                    sam validate --region us-east-1
                    sam deploy --force-upload --stack-name todo-list-aws-staging --region us-east-1 --resolve-s3 --config-env staging --no-fail-on-empty-changeset --capabilities CAPABILITY_IAM --no-confirm-changeset | tee url_output.txt
                '''
                
            }
            
        }
        
        // Etapa “Rest Test” para la ejecución de las pruebas de integración
        stage('Rest Test'){
            
            steps{
                
                script {
                    def BASE_URL = sh( script: "aws cloudformation describe-stacks --stack-name todo-list-aws --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text", returnStdout: true)
            		echo "${BASE_URL}"
                    def INTEGRATION = sh( script: "ksh /var/lib/jenkins/workspace/cp1D/pipelines/common-steps/tests.ksh ${BASE_URL}", returnStdout: true)
                }

                echo 'Ejecución de las pruebas de integración'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
            		sh "pytest --junitxml=test/integration/result-rest.xml -s test/integration/todoApiTest.py"
        		}
        		
            }
        }
        
        // Etapa “Promote” para marcar la versión como “Release” y ser desplegada en producción
        stage('Promote'){
            
            steps{
                echo 'Marcando la versión como RELEASE'
                
                withCredentials([sshUserPrivateKey(credentialsId: 'GitHub_Access_SSH', keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                        git add .
                        git commit -m "Subir cambios develop a master"
                        git push origin develop
                        git checkout -b master 
                        git merge develop 
                        git push origin master
                    '''
                }

                echo 'Disponible para desplegar en PRODUCCIÓN'
        		
            }
        }
        
    }
    
    post { 
	    always { 
		     echo 'Elimir stack creado'
	             sh "aws cloudformation delete-stack --stack-name todo-list-aws-production"
		     echo 'Borrar WORKSPACE'
		     cleanWs()
	    }
	}
}
